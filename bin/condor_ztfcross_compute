
import os, sys
import glob
import optparse
import numpy as np
import glob

import matplotlib
#matplotlib.rc('text', usetex=True)
matplotlib.use('Agg')
matplotlib.rcParams.update({'font.size': 16})
matplotlib.rcParams['contour.negative_linestyle'] = 'solid'
import matplotlib.colors as colors
import matplotlib.cm as cmx
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable


def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("-d","--dataDir",default="/home/mcoughlin/ZTF/ztfcross/data/1027")
    parser.add_option("-o","--outputDir",default="/home/mcoughlin/ZTF/ztfcross/output")

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()

basedatadir = opts.dataDir
baseoutdir = opts.outputDir

datadirs = glob.glob(os.path.join(basedatadir,"*"))

condorDir = os.path.join(baseoutdir,'condor')
if not os.path.isdir(condorDir):
    os.makedirs(condorDir)

logDir = os.path.join(condorDir,'logs')
if not os.path.isdir(logDir):
    os.makedirs(logDir)
 
job_number = 0
job_number_query = 0
 
dir_path = os.path.dirname(os.path.realpath(__file__))

condordag = os.path.join(condorDir,'condor.dag')
fid = open(condordag,'w')
condorsh = os.path.join(condorDir,'condor.sh')
fid1 = open(condorsh,'w')

crossall = np.empty((0,7))
for datadir in datadirs:
    fitsfz = glob.glob(os.path.join(datadir,'*.fits.fz'))
    if len(fitsfz) == 0:
        continue

    dataDirSplit = list(filter(None,datadir.split("/")))
    imagenum = dataDirSplit[-1]
    datenum = dataDirSplit[-2]

    outdir = os.path.join(baseoutdir, datenum, imagenum)

    filename = os.path.join(outdir,'crosstalk.dat')

    if not os.path.isfile(filename):
        fid1.write('python %s/ztfcross_compute --doPlots --doImages --dataDir %s --outputDir %s\n' % (dir_path, datadir, baseoutdir))

        fid.write('JOB %d condor.sub\n'%(job_number))
        fid.write('RETRY %d 3\n'%(job_number))
        fid.write('VARS %d jobNumber="%d" outputDir="%s" dataDir="%s"\n'%(job_number,job_number,baseoutdir,datadir))
        fid.write('\n\n')
        job_number = job_number + 1

    else:
        print('%s already exists... continuing.' % filename)
        continue

fid1.close()
fid.close()

fid = open(os.path.join(condorDir,'condor.sub'),'w')
fid.write('executable = %s/ztfcross_compute\n'%dir_path)
fid.write('output = logs/out.$(jobNumber)\n');
fid.write('error = logs/err.$(jobNumber)\n');
fid.write('arguments = --dataDir $(dataDir) --outputDir $(outputDir)\n')
fid.write('requirements = OpSys == "LINUX"\n');
fid.write('request_memory = 8192\n');
fid.write('request_cpus = 1\n');
fid.write('accounting_group = ligo.dev.o2.burst.allsky.stamp\n');
fid.write('notification = never\n');
fid.write('getenv = true\n');
fid.write('log = /local/michael.coughlin/ztfcross.log\n')
fid.write('+MaxHours = 24\n');
fid.write('universe = vanilla\n');
fid.write('queue 1\n');
fid.close()


