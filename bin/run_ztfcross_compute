
import os, sys
import optparse
import glob
import numpy as np

import matplotlib
#matplotlib.rc('text', usetex=True)
matplotlib.use('Agg')
matplotlib.rcParams.update({'font.size': 16})
matplotlib.rcParams['contour.negative_linestyle'] = 'solid'
import matplotlib.colors as colors
import matplotlib.cm as cmx
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doAnalysis",  action="store_true", default=False)

    parser.add_option("-d","--dataDir",default="/home/mcoughlin/ZTF/ztfcross/data/1027")
    parser.add_option("-o","--outputDir",default="/home/mcoughlin/ZTF/ztfcross/output")

    parser.add_option("-s","--saturation_min",default=60000, type=int)
    parser.add_option("-e","--saturation_max",default=68000, type=int)

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()

basedatadir = opts.dataDir
baseoutdir = opts.outputDir
saturation_min = opts.saturation_min
saturation_max = opts.saturation_max

datadirs = glob.glob(os.path.join(basedatadir,"*"))

ccdnums = np.arange(1,17)
kks = [0,1,2,3]

crossall = np.empty((0,7))
for datadir in datadirs:
    dataDirSplit = list(filter(None,datadir.split("/")))
    imagenum = dataDirSplit[-1]
    datenum = dataDirSplit[-2]

    outdir = os.path.join(baseoutdir, datenum, imagenum,
                          "%d_%d"%(saturation_min, saturation_max))

    filename = os.path.join(outdir,'crosstalk.dat')

    if opts.doAnalysis:
        #if not os.path.isfile(filename):
        if True:
            system_call = "python ztfcross_compute --doPlots --doImages --dataDir %s" % datadir
            print(system_call)
            print(stop)
            os.system(system_call)
        else:
            print('%s already exists... continuing.' % filename)
            continue

    if not os.path.isfile(filename):
        continue
    data_out = np.loadtxt(filename)
    if data_out.size == 0:
        continue

    crossall = np.vstack((crossall, data_out))

if opts.doPlots:
    outdir = os.path.join(baseoutdir, datenum)

    xsize, ysize = 3072, 3080

    alpha = 0.4
    color='k'
    edgecolor='k'

    cmap = plt.cm.jet
    cNorm  = colors.Normalize(vmin=np.min(crossall[:,5]), vmax=np.max(crossall[:,5]))
    scalarMap = cmx.ScalarMappable(norm=cNorm,cmap=cmap)

    fig = plt.figure(figsize=(8,8))
    ax  = fig.add_axes([0.1, 0.1, 0.7, 0.85]) # [left, bottom, width, height]
    axc = fig.add_axes([0.85, 0.10, 0.05, 0.85])

    qids = np.arange(64)
    for qid1 in qids:
        ii, kk = np.divmod(qid1,4)
        for qid2 in qids:
            jj, ll = np.divmod(qid2,4)
            
            if (kk==0) and (ll==0):
                xcorners = (qid1 * xsize, qid1 * xsize + 4*xsize)
                ycorners = (qid2 * ysize, qid2 * ysize + 4*ysize)
                corners = [] 
                for x in xcorners:
                    for y in ycorners: 
                        corners.append([x,y])
                corners = [corners[0], corners[1], corners[3], corners[2]]
                corners = np.array(corners)
                for mm in range(len(corners)):
                    idx1 = mm
                    if mm == len(corners)-1:
                        idx2 = 0
                    else:
                        idx2 = mm+1
                    ax.plot([corners[idx1][0],corners[idx2][0]],
                            [corners[idx1][1],corners[idx2][1]],'k-',alpha=1.0)                
            xcorners = (qid1 * xsize, qid1 * xsize + xsize)
            ycorners = (qid2 * ysize, qid2 * ysize + ysize)
            corners = []
            for x in xcorners:
                for y in ycorners:
                    corners.append([x,y])
            corners = [corners[0], corners[1], corners[3], corners[2]]
            corners = np.array(corners)
            for mm in range(len(corners)):
                idx1 = mm
                if mm == len(corners)-1:
                    idx2 = 0
                else:
                    idx2 = mm+1
                ax.plot([corners[idx1][0],corners[idx2][0]],
                        [corners[idx1][1],corners[idx2][1]],'k-',alpha=0.1)

    outfile = os.path.join(outdir,'crosstalk.dat')
    fid = open(outfile, 'w')
    for qid1 in qids:
        ii, kk = np.divmod(qid1,4)
        for qid2 in qids:
            jj, ll = np.divmod(qid2,4)
            idx = np.where((crossall[:,0] == ii) & (crossall[:,2] == kk) &
                           (crossall[:,1] == jj) & (crossall[:,3] == ll))[0]
            if len(idx) == 0:
                continue
            val = np.median(crossall[idx,5])
            nvald = len(idx)

            xval = qid1 * xsize + xsize/2.0
            yval = qid2 * ysize + ysize/2.0 
    
            colorVal = scalarMap.to_rgba(val)
            ax.scatter(xval, yval, s=nvald, c=np.atleast_2d(colorVal))
  
            fid.write('%d %d %d %d %.5f %d\n' %(ii, jj, kk, ll, val, nvald))
    fid.close()

    cbar = matplotlib.colorbar.ColorbarBase(axc, cmap=cmap,
                                            norm=cNorm,orientation='vertical')
    ax.set_xticks([], [])
    ax.set_yticks([], [])

    plotName = os.path.join(outdir,'crosstalk.pdf')
    plt.savefig(plotName)
    plt.close()
